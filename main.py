import os
import asyncio
import tempfile
import zipfile
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton

BOT_TOKEN = os.environ.get("BOT_TOKEN")
PASSWORD = os.environ.get("PASSWORD", "EKMOB")
LOCAL_FOLDER = "archives"

os.makedirs(LOCAL_FOLDER, exist_ok=True)
user_states = {}

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ö–∏–≤"), KeyboardButton(text="üì• –ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤")],
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")

@dp.message()
async def text_handler(message: types.Message):
    user_id = message.from_user.id
    state = user_states.setdefault(user_id, {})
    if not state.get("authorized"):
        if message.text.strip() == PASSWORD:
            state["authorized"] = True
            await message.answer("–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç ‚úÖ", reply_markup=main_kb)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    if message.text == "üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ö–∏–≤":
        state["files"] = []
        state["awaiting_files"] = True
        state["awaiting_name"] = False
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ).\n–ö–æ–≥–¥–∞ –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /done.")
    elif message.text == "/done" and state.get("awaiting_files"):
        if not state.get("files"):
            await message.answer("–í—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–∞–π–ª—ã.")
            return
        state["awaiting_files"] = False
        state["awaiting_name"] = True
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞—Ä—Ö–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21.08.2025.zip):")
    elif state.get("awaiting_name"):
        archive_name = message.text.strip()
        if not archive_name.endswith(".zip"):
            await message.answer("–ò–º—è –∞—Ä—Ö–∏–≤–∞ –¥–æ–ª–∂–Ω–æ –æ–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ .zip!")
            return
        archive_path = os.path.join(LOCAL_FOLDER, archive_name)
        with zipfile.ZipFile(archive_path, "w") as zipf:
            for file_info in state["files"]:
                zipf.write(file_info["path"], arcname=file_info["filename"])
        for file_info in state["files"]:
            os.remove(file_info["path"])
        state.clear()
        await message.answer(f"–ê—Ä—Ö–∏–≤ {archive_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=main_kb)
    elif message.text == "üì• –ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤":
        files = [f for f in os.listdir(LOCAL_FOLDER) if f.endswith(".zip")]
        if not files:
            await message.answer("–ù–µ—Ç zip-–∞—Ä—Ö–∏–≤–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", reply_markup=main_kb)
        else:
            # –°–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏
            files_kb = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=name)] for name in files] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ö–∏–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=files_kb)
            state["awaiting_download"] = True
    elif state.get("awaiting_download"):
        archive_name = message.text.strip()
        if archive_name == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)
            state["awaiting_download"] = False
            return
        archive_path = os.path.join(LOCAL_FOLDER, archive_name)
        if not os.path.exists(archive_path):
            await message.answer("–ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=main_kb)
        else:
            await message.answer_document(FSInputFile(archive_path), caption=archive_name, reply_markup=main_kb)
        state["awaiting_download"] = False
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üëá", reply_markup=main_kb)

@dp.message(lambda m: m.document is not None)
async def handle_upload(message: types.Message):
    user_id = message.from_user.id
    state = user_states.setdefault(user_id, {})
    if not state.get("authorized"):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")
        return
    if not state.get("awaiting_files"):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ 'üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ö–∏–≤'.")
        return
    with tempfile.NamedTemporaryFile(delete=False) as tmpfile:
        await bot.download(message.document, destination=tmpfile.name)
        file_info = {"filename": message.document.file_name, "path": tmpfile.name}
        state.setdefault("files", []).append(file_info)
    await message.answer(f"–§–∞–π–ª {message.document.file_name} –∑–∞–≥—Ä—É–∂–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done.")

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
