import os
import asyncio
import pandas as pd
import tempfile

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

BOT_TOKEN = os.environ.get("BOT_TOKEN")
PASSWORD = os.environ.get("PASSWORD", "EKMOB")
DATA_FILE = "data.csv"

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
user_states = {}

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV"), KeyboardButton(text="üîç –ù–∞–π—Ç–∏")],
        [KeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë")],
    ],
    resize_keyboard=True
)

COLUMNS = ["–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"]

def save_filtered_csv(file_path):
    df = pd.read_csv(file_path, dtype=str).fillna("")
    df = df[[col for col in COLUMNS if col in df.columns]]
    df.to_csv(DATA_FILE, index=False)
    return len(df)

def search_rows(query):
    if not os.path.exists(DATA_FILE):
        return []
    df = pd.read_csv(DATA_FILE, dtype=str).fillna("")
    query = query.lower()
    results = []
    for _, row in df.iterrows():
        if (
            query in str(row["–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]).lower()
            or query in str(row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"]).lower()
        ):
            results.append(row)
    return results

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")

@dp.message(F.document)
async def handle_document(message: types.Message):
    user_id = message.from_user.id
    state = user_states.setdefault(user_id, {})
    if not state.get("authorized"):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")
        return
    if not state.get("awaiting_csv"):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV' –≤ –º–µ–Ω—é.")
        return
    doc = message.document
    if not doc.file_name.lower().endswith(".csv"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ CSV-—Ñ–∞–π–ª.")
        return
    with tempfile.NamedTemporaryFile(delete=False, suffix=".csv") as tmpfile:
        await bot.download(doc, destination=tmpfile.name)
        count = save_filtered_csv(tmpfile.name)
        os.remove(tmpfile.name)
    await message.answer(f"CSV-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {count}", reply_markup=main_kb)
    state["awaiting_csv"] = False

@dp.message()
async def main_menu(message: types.Message):
    user_id = message.from_user.id
    state = user_states.setdefault(user_id, {})
    if not state.get("authorized"):
        if message.text.strip() == PASSWORD:
            state["authorized"] = True
            await message.answer("–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç ‚úÖ", reply_markup=main_kb)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    if state.get("awaiting_csv"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É.")
        return

    if message.text == "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω, –æ–Ω –∑–∞–º–µ–Ω–∏—Ç —Å—Ç–∞—Ä—ã–π).", reply_markup=types.ReplyKeyboardRemove())
        state["awaiting_csv"] = True
        return
    elif message.text == "üîç –ù–∞–π—Ç–∏":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:")
        state["awaiting_query"] = True
        return
    elif message.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë":
        if not os.path.exists(DATA_FILE):
            await message.answer("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
            return
        df = pd.read_csv(DATA_FILE, dtype=str).fillna("")
        if df.empty:
            await message.answer("–í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        text = ""
        for i, row in df.iterrows():
            text += f'{row["–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]} | {row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"]}\n'
            if i % 20 == 19:
                await message.answer(text)
                text = ""
        if text:
            await message.answer(text)
        return

    # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    if state.get("awaiting_query"):
        results = search_rows(message.text)
        if not results:
            await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            text = ""
            for i, row in enumerate(results):
                text += f'{row["–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]} | {row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"]}\n'
                if i % 20 == 19:
                    await message.answer(text)
                    text = ""
            if text:
                await message.answer(text)
        state["awaiting_query"] = False
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_kb)
        return

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
