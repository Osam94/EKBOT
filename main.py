import os
import shutil
import zipfile
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from config import TOKEN, PASSWORD, DATA_DIR

os.makedirs(DATA_DIR, exist_ok=True)
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

user_data = {}

menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í—ã–≥—Ä—É–∑–∏—Ç—å –ø–∞–ø–∫—É")],
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫—É")],
    ],
    resize_keyboard=True
)

class Steps(StatesGroup):
    WAIT_PASSWORD = State()
    WAIT_FILES = State()
    WAIT_FOLDER_NAME = State()
    WAIT_CHOOSE_FOLDER = State()

@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_data.get(user_id, {}).get('authorized'):
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb)
    else:
        await state.set_state(Steps.WAIT_PASSWORD)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")

@dp.message(Steps.WAIT_PASSWORD)
async def password_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text.strip() == PASSWORD:
        user_data[user_id] = {"authorized": True}
        await state.clear()
        await message.answer("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@dp.message(F.text == "–í—ã–≥—Ä—É–∑–∏—Ç—å –ø–∞–ø–∫—É")
async def upload_folder(message: Message, state: FSMContext):
    await state.update_data(files=[])
    await state.set_state(Steps.WAIT_FILES)
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ –û–î–ù–û–ô –∏–ª–∏ –ù–ï–°–ö–û–õ–¨–ö–ò–ú–ò –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –í–°–ï —Ñ–∞–π–ª—ã –¥–ª—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ (–¥–∞—Ç—É), –Ω–∞–ø—Ä–∏–º–µ—Ä: 21.08.2025"
    )

@dp.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫—É")
async def get_folder(message: Message, state: FSMContext):
    folders = [d for d in os.listdir(DATA_DIR) if os.path.isdir(os.path.join(DATA_DIR, d))]
    if not folders:
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫.")
        return
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f)] for f in folders],
        resize_keyboard=True
    )
    await state.set_state(Steps.WAIT_CHOOSE_FOLDER)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=kb)

@dp.message(Steps.WAIT_FILES, F.document)
async def save_file(message: Message, state: FSMContext):
    data = await state.get_data()
    files = data.get("files", [])
    file = message.document
    save_path = os.path.join(DATA_DIR, "_temp", file.file_name)
    os.makedirs(os.path.dirname(save_path), exist_ok=True)
    await bot.download(file, destination=save_path)
    files.append(save_path)
    await state.update_data(files=files)
    await message.answer(f"–§–∞–π–ª {file.file_name} –ø–æ–ª—É—á–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏.")

@dp.message(Steps.WAIT_FILES)
async def folder_name_handler(message: Message, state: FSMContext):
    folder_name = message.text.strip()
    data = await state.get_data()
    files = data.get("files", [])
    if not files:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª.")
        return
    folder_path = os.path.join(DATA_DIR, folder_name)
    os.makedirs(folder_path, exist_ok=True)
    for f in files:
        shutil.move(f, os.path.join(folder_path, os.path.basename(f)))
    temp_dir = os.path.join(DATA_DIR, "_temp")
    if os.path.isdir(temp_dir):
        shutil.rmtree(temp_dir)
    await state.clear()
    await message.answer(
        f"–ü–∞–ø–∫–∞ {folder_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb
    )

@dp.message(Steps.WAIT_CHOOSE_FOLDER)
async def send_folder_zip(message: Message, state: FSMContext):
    folder_name = message.text.strip()
    folder_path = os.path.join(DATA_DIR, folder_name)
    if not os.path.isdir(folder_path):
        await message.answer("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    zip_path = f"{folder_path}.zip"
    with zipfile.ZipFile(zip_path, 'w') as z:
        for filename in os.listdir(folder_path):
            z.write(os.path.join(folder_path, filename), arcname=filename)
    await bot.send_document(message.chat.id, FSInputFile(zip_path))
    os.remove(zip_path)
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb)

@dp.message()
async def fallback_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not user_data.get(user_id, {}).get('authorized'):
        await state.set_state(Steps.WAIT_PASSWORD)
        await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
