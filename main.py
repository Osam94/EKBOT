import os
import asyncio
import tempfile
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton

BOT_TOKEN = os.environ.get("BOT_TOKEN")
PASSWORD = os.environ.get("PASSWORD", "EKMOB")
LOCAL_FOLDER = "archives"

os.makedirs(os.path.join(LOCAL_FOLDER, "–ø–æ–∫—É–ø–∫–∞"), exist_ok=True)
os.makedirs(os.path.join(LOCAL_FOLDER, "–ø—Ä–æ–¥–∞–∂–∞"), exist_ok=True)
user_states = {}

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"), KeyboardButton(text="üì• –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")],
    ],
    resize_keyboard=True
)
docs_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–∫—É–ø–∫–∏"), KeyboardButton(text="–î–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–¥–∞–∂–∏")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")

@dp.message()
async def text_handler(message: types.Message):
    user_id = message.from_user.id
    state = user_states.setdefault(user_id, {})
    if not state.get("authorized"):
        if message.text.strip() == PASSWORD:
            state["authorized"] = True
            await message.answer("–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç ‚úÖ", reply_markup=main_kb)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if message.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã":
        state.clear()
        state["mode"] = "upload"
        await message.answer("–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å?", reply_markup=docs_kb)
    elif message.text == "üì• –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã":
        state.clear()
        state["mode"] = "get"
        await message.answer("–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=docs_kb)

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    elif message.text in ("–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–∫—É–ø–∫–∏", "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–¥–∞–∂–∏"):
        doc_type = "–ø–æ–∫—É–ø–∫–∞" if "–ø–æ–∫—É–ø–∫–∏" in message.text else "–ø—Ä–æ–¥–∞–∂–∞"
        state["doc_type"] = doc_type

        if state.get("mode") == "upload":
            state["files"] = []
            state["awaiting_files"] = True
            state["awaiting_date"] = False
            await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /done.", reply_markup=types.ReplyKeyboardRemove())
        elif state.get("mode") == "get":
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∞—Ç (–∫–Ω–æ–ø–∫–∞–º–∏) –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            folder_path = os.path.join(LOCAL_FOLDER, doc_type)
            if not os.path.isdir(folder_path):
                await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞—Ç.", reply_markup=main_kb)
                return
            dates = [d for d in os.listdir(folder_path) if os.path.isdir(os.path.join(folder_path, d))]
            if not dates:
                await message.answer("–ù–µ—Ç –∞—Ä—Ö–∏–≤–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.", reply_markup=main_kb)
            else:
                dates_kb = ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text=d)] for d in sorted(dates)] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=dates_kb)
                state["awaiting_date_select"] = True

    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)
        return

    # –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É
    elif message.text == "/done" and state.get("awaiting_files"):
        if not state.get("files"):
            await message.answer("–í—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–∞–π–ª—ã.")
            return
        state["awaiting_files"] = False
        state["awaiting_date"] = True
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21.08.2025):")
    # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É
    elif state.get("awaiting_date"):
        folder = os.path.join(LOCAL_FOLDER, state["doc_type"], message.text.strip())
        os.makedirs(folder, exist_ok=True)
        for file_info in state["files"]:
            dest = os.path.join(folder, file_info["filename"])
            os.replace(file_info["path"], dest)
        await message.answer(f"–î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {folder}", reply_markup=main_kb)
        state.clear()
    # –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–µ
    elif state.get("awaiting_date_select"):
        if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)
            state.clear()
            return
        folder = os.path.join(LOCAL_FOLDER, state["doc_type"], message.text.strip())
        if not os.path.isdir(folder):
            await message.answer("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        files = [f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]
        if not files:
            await message.answer("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ.", reply_markup=main_kb)
        else:
            await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞ {message.text.strip()}:")
            for f in files:
                await message.answer_document(FSInputFile(os.path.join(folder, f)), caption=f)
        state.clear()
        await message.answer("–ì–æ—Ç–æ–≤–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üëá", reply_markup=main_kb)

@dp.message(lambda m: m.document is not None)
async def handle_upload(message: types.Message):
    user_id = message.from_user.id
    state = user_states.setdefault(user_id, {})
    if not state.get("authorized"):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")
        return
    if not state.get("awaiting_files"):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏.")
        return
    with tempfile.NamedTemporaryFile(delete=False) as tmpfile:
        await bot.download(message.document, destination=tmpfile.name)
        file_info = {"filename": message.document.file_name, "path": tmpfile.name}
        state.setdefault("files", []).append(file_info)
    await message.answer(f"–§–∞–π–ª {message.document.file_name} –∑–∞–≥—Ä—É–∂–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done.")

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
